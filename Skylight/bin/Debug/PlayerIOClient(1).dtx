
@@playerioclient.xml

Summary:
  The Player.IO PartnerPay service.  Here's how to connect to Player.IO and setting a partner id:  
<code>
            //Connecting to Player.IO and setting a partner id
            var client = PlayerIO.Connect(
            	&quot;[Enter your game id here]&quot;,
            	&quot;public&quot;,
            	&quot;user-id&quot;,
            	null,
            	&quot;partner-id&quot;
            );
            </code>
  This is how you check and set the partner id of a user:  
<code>
            if (String.IsNullOrEmpty(client.PartnerPay.CurrentPartner)) {
            	client.PartnerPay.SetTag(&quot;partner-id&quot;);
            }
            </code>
  Finally, here's how to trigger a custom action:  
<code>
            client.PartnerPay.Trigger(&quot;levelfive&quot;);
            </code>
  
Description:
      
Summary:
Triggers the custom PartnerPay action identified by the given key
Description:
  The key of the action      
Summary:
Triggers the custom PartnerPay action identified by the given key
Description:
  The key of the action  The number of actions to trigger      
Summary:
Triggers the custom PartnerPay action identified by the given key
Description:
  The key of the action  Callback that will be called if the action is succesful.      
Summary:
Triggers the custom PartnerPay action identified by the given key
Description:
  The key of the action  Callback that will be called if the action is succesful.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Triggers the custom PartnerPay action identified by the given key
Description:
  The key of the action  The number of actions to trigger  Callback that will be called if the action is succesful.      
Summary:
Triggers the custom PartnerPay action identified by the given key
Description:
  The key of the action  The number of actions to trigger  Callback that will be called if the action is succesful.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Set (or change) the PartnerPay partner id of the connected user
Description:
  The PartnerPay partner id      
Summary:
Set (or change) the PartnerPay partner id of the connected user
Description:
  The PartnerPay partner id  Callback that will be called if the action is succesful.      
Summary:
Set (or change) the PartnerPay partner id of the connected user
Description:
  The PartnerPay partner id  Callback that will be called if the action is succesful.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
  The current partner id of the connected user, if any.  
Description:
      
Summary:
  The Player.IO PayVault.  Instances of this class represent a specific user's Vault, and contains methods and properties both for inspecting and manipulating the contents.<p>
  All properties and methods that inspect the Vault requires that it is up-to-date first. This can be achieved explicitly by calling the Refresh() method  or implicitly by calling any method which modifies the Vault. <p>
  Here is how to read the Coins balance:  
<code>
            PayVault vault = client.PayVault;
            vault.Refresh();
            int coins = vault.Coins;
            </code>
  This is how you check if an item exists:  
<code>
            PayVault vault = client.PayVault;
            vault.Refresh();
            if (vault.Has(&quot;simplecar&quot;)) {
            	//...
            }
            </code>
  Credit and Debit can be used like this:  
<code>
            PayVault vault = client.PayVault;
            vault.Credit(100, &quot;New player bonus&quot;, delegate(){
            	int newcoins = vault.Coins;
            	//Show new amount to user.
            });
            
            vault.Debit(10, &quot;Race starting fee&quot;, delegate() {
            	//Let player start race
            }
            </code>
  Buying items with Coins is really easy. This requires that you have created an item in the PayVaultItems table in BigDB with the key &quot;speedboost&quot;, and a property &quot;PriceCoins&quot; containing the price.  
<code>
            PayVault vault = client.PayVault;
            vault.Buy(true, new BuyItemInfo[]{
            	new BuyItemInfo(&quot;speedboost&quot;)
            }, delegate() {
            	int boosts = vault.Count(&quot;speedboost&quot;);
            	//Show new number of boosts to user.
            });
            </code>
  And here's how to consume an item:  
<code>
            PayVault vault = client.PayVault;
            vault.Refresh();
            VaultItem boost = vault.First(&quot;speedboost&quot;);
            if (boost != null) {
            	vault.Consume(new VaultItem[]{boost}, delegate() {
            		//Boost the player's car
            	});
            }
            </code>
  When it's time for a user to add more Coins, you can do it like this:  
<code>
            PayVault vault = client.PayVault;
            vault.GetBuyCoinsInfo(&quot;socialgold&quot;,
            	new Dictionary&lt;string, string&gt;(){{&quot;offerid&quot;, &quot;...&quot;}},
            	delegate(Dictionary&lt;string, string&gt; result) {
            		string url = result[&quot;socialgoldurl&quot;];
            		//Show URL to player...
            	});
            </code>
  And this is how to let the user buy an item directly. This requires that you have created an item in the PayVaultItems table in BigDB with the key &quot;supercar&quot;, and a property &quot;PriceUSD&quot; containing the price.  
<code>
            PayVault vault = client.PayVault;
            vault.GetBuyDirectInfo(&quot;paypal&quot;,
            	new Dictionary&lt;string, string&gt;(){
            		{&quot;currency&quot;, &quot;USD&quot;},
            		{&quot;item_name&quot;, &quot;Red Supercar&quot;}
            	},
            	new BuyItemInfo[]{
            		new BuyItemInfo(&quot;supercar&quot;).Set(&quot;Color&quot;, &quot;Red&quot;)
            	},
            	delegate(Dictionary&lt;string, string&gt; result) {
            		string url = result[&quot;paypalurl&quot;];
            		//Show URL to player...
            	});
            </code>
  Finally, there are methods for retrieving the payment history of a user:  
<code>
            PayVault vault = client.PayVault;
            vault.ReadHistory(0, 10, delegate(PayVaultHistoryEntry[] history) {
            	if (history.Length &gt; 0) {
            		string lastprice = history[0].ProviderPrice;
            	}
            });
            </code>
  
Description:
      
Summary:
  This method checks if the Vault contains at least one item of the given itemKey. This method can only be called on an up-to-date vault.  
Description:
  The itemKey to check for  
Returns:
True if the user has at least one item of the given type (itemKey)
Description:
      
Summary:
  Returns the first item of the given itemKey from this Vault. This method can only be called on an up-to-date vault.  
Description:
  The itemKey of the item to get  
Returns:
A VaultItem if one was found, or null if not
Description:
      
Summary:
  Returns the number of items of a given itemKey is in this Vault. This method can only be called on an up-to-date vault.  
Description:
  The itemKey of the items to count  
Returns:
The number of items of the given type that the user has in the vault
Description:
      
Summary:
Refreshes this Vault, making sure the Items and Coins are up-to-date.
Description:
      
Summary:
Refreshes this Vault, making sure the Items and Coins are up-to-date.
Description:
  Callback that will be called when the refresh is completed      
Summary:
Refreshes this Vault, making sure the Items and Coins are up-to-date.
Description:
  Callback that will be called when the refresh is completed  Callback that will be called instead of successCallback if an error occurs during the refresh.      
Summary:
  Loads a page of entries from this Vaults history, in reverse chronological order, i.e. newest first.  
Description:
  The page of entries to load. The first page has number 0.  The number of entries per page.  
Returns:
The loaded history entries, or an empty array if none were found on the given page.
Description:
      
Summary:
  Loads a page of entries from this Vaults history, in reverse chronological order, i.e. newest first.  
Description:
  The page of entries to load. The first page has number 0.  The number of entries per page.  Callback that will be called with the loaded PayVault history entries, or an empty array if none were found on the given page.      
Summary:
  Loads a page of entries from this Vaults history, in reverse chronological order, i.e. newest first.  
Description:
  The page of entries to load. The first page has number 0.  The number of entries per page.  Callback that will be called with the loaded PayVault history entries, or an empty array if none were found on the given page.  Callback that will be called instead of successCallback if an error occurs during the loading of history entries.      
Summary:
Give coins to this Vault.
Description:
  The amount of coins to give.  Your reason for giving the coins to this user. This will show up in the vault history, and in the PayVault admin panel for this user.      
Summary:
Give coins to this Vault.
Description:
  The amount of coins to give.  Your reason for giving the coins to this user. This will show up in the vault history, and in the PayVault admin panel for this user.  Callback that will be called if the credit is succesful.      
Summary:
Give coins to this Vault.
Description:
  The amount of coins to give.  Your reason for giving the coins to this user. This will show up in the vault history, and in the PayVault admin panel for this user.  Callback that will be called if the credit is succesful.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Take coins from this Vault
Description:
  The amount of coins to take.  Your reason for taking the coins from this user. This will show up in the vault history, and in the PayVault admin panel for this user.      
Summary:
Take coins from this Vault
Description:
  The amount of coins to take.  Your reason for taking the coins from this user. This will show up in the vault history, and in the PayVault admin panel for this user.  Callback that will be called if the debit is succesful.      
Summary:
Take coins from this Vault
Description:
  The amount of coins to take.  Your reason for taking the coins from this user. This will show up in the vault history, and in the PayVault admin panel for this user.  Callback that will be called if the debit is succesful.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Consume items in this Vault. This will cause them to be removed, but this action will not show up in the vault history.
Description:
  The VaultItems to use from the users vault - this should be instances from the Items array property.      
Summary:
Consume items in this Vault. This will cause them to be removed, but this action will not show up in the vault history.
Description:
  The VaultItems to use from the users vault - this should be instances from the Items array property.  Callback that will be called if the use is succesful.      
Summary:
Consume items in this Vault. This will cause them to be removed, but this action will not show up in the vault history.
Description:
  The VaultItems to use from the users vault - this should be instances from the Items array property.  Callback that will be called if the use is succesful.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Buy items with Coins.
Description:
  If true, the items will be stored in the Vault. If false, the items will be consumed immediately after purchase.  A list of items to buy, together with any additional payload.      
Summary:
Buy items with Coins.
Description:
  If true, the items will be stored in the Vault. If false, the items will be consumed immediately after purchase.  A list of items to buy, together with any additional payload.  Callback that will be called if the buy is succesful.      
Summary:
Buy items with Coins.
Description:
  If true, the items will be stored in the Vault. If false, the items will be consumed immediately after purchase.  A list of items to buy, together with any additional payload.  Callback that will be called if the buy is succesful.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Give the user items without taking any of his coins from the vault.
Description:
  Each BuyItemInfo instance contains the key of the item to give in the PayVaultItems BigDB table and any additional payload.      
Summary:
Give the user items without taking any of his coins from the vault.
Description:
  Each BuyItemInfo instance contains the key of the item to give in the PayVaultItems BigDB table and any additional payload.  Callback that will be called if the give is succesfull.      
Summary:
Give the user items without taking any of his coins from the vault.
Description:
  Each BuyItemInfo instance contains the key of the item to give in the PayVaultItems BigDB table and any additional payload.  Callback that will be called if the give is succesfull.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Gets information about how to make a coin purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use for the coin purchase.  Any additional information that will be given to the PayVault provider to configure this purchase. 
Returns:
A dictionary with PayVault provider-specific information about how to proceed with the purchase.
Description:
      
Summary:
Gets information about how to make a coin purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use for the coin purchase.  Any additional information that will be given to the PayVault provider to configure this purchase. Callback that will be called with information about how to proceed with the purchase.      
Summary:
Gets information about how to make a coin purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use for the coin purchase.  Any additional information that will be given to the PayVault provider to configure this purchase. Callback that will be called with information about how to proceed with the purchase.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Gets information about how to make a direct item purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use for the coin purchase.  Any additional information that will be given to the PayVault provider to configure this purchase. Each BuyItemInfo instance contains the key of the item to buy and any additional payload.  
Returns:
A dictionary with PayVault provider-specific information about how to proceed with the purchase.
Description:
      
Summary:
Gets information about how to make a direct item purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use for the coin purchase.  Any additional information that will be given to the PayVault provider to configure this purchase.  Each BuyItemInfo instance contains the key of the item to buy and any additional payload.  Callback that will be called with information about how to proceed with the purchase.      
Summary:
Gets information about how to make a direct item purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use for the coin purchase.  Any additional information that will be given to the PayVault provider to configure this purchase. Each BuyItemInfo instance contains the key of the item to buy and any additional payload.  Callback that will be called with information about how to proceed with the purchase.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Use information from a provider to finalize a purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use.  The information needed to finalize this purchase. 
Returns:
A dictionary with PayVault provider-specific information about the purchase.
Description:
      
Summary:
Use information from a provider to finalize a purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use.  The information needed to finalize this purchase. Callback that will be called with PayVault provider-specific information about the purchase.      
Summary:
Use information from a provider to finalize a purchase with the specified PayVault provider.
Description:
  The name of the PayVault provider to use.  The information needed to finalize this purchase. Callback that will be called with PayVault provider-specific information about the purchase.  Callback that will be called instead of successCallback if an error occurs.      
Summary:
This property contains the current coin balance of this Vault. This property can only be read on an up-to-date vault.
Description:
      
Summary:
This property contains the list of items in this Vault. This property can only be read on an up-to-date vault.
Description:
      
Summary:
  Represents information about an item in a user's Vault.  The methods and properties in a VaultItem are very simliar to those of a DatabaseObject, except that it's read-only, and that there are some extra properties regarding the purchase.  
<code>
            //Get a 'simplecar' from the Vault
            VaultItem car = client.PayVault.First(&quot;simplecar&quot;);
            if (car != null) {
            	string color = car.GetString(&quot;Color&quot;);
            	bool stripes = car.GetBool(&quot;Stripes&quot;);
            }
            </code>
  
Description:
      
Summary:
Returns true if the given property exists on this object
Description:
      
Summary:
If the given property exists, this method returns true and the value as object in the out parameter. If it does not, this method return false
Description:
      
Summary:
Get the given property as an object
Description:
      
Summary:
Get the given string property
Description:
      
Summary:
Get the given string property, falling back to the given default value if the string property does not exist
Description:
      
Summary:
Get the given int property
Description:
      
Summary:
Get the given int property, falling back to the given default value if the int property does not exist
Description:
      
Summary:
Get the given uint property
Description:
      
Summary:
Get the given uint property, falling back to the given default value if the uint property does not exist
Description:
      
Summary:
Get the given long property
Description:
      
Summary:
Get the given long property, falling back to the given default value if the long property does not exist
Description:
      
Summary:
Get the given bool property
Description:
      
Summary:
Get the given bool property, falling back to the given default value if the bool property does not exist
Description:
      
Summary:
Get the given float property
Description:
      
Summary:
Get the given float property, falling back to the given default value if the float property does not exist
Description:
      
Summary:
Get the given double property
Description:
      
Summary:
Get the given double property, falling back to the given default value if the double property does not exist
Description:
      
Summary:
Get the given byte array property
Description:
      
Summary:
Get the given byte array property, falling back to the given default value if the byte array property does not exist
Description:
      
Summary:
Get the given datetime property
Description:
      
Summary:
Get the given datetime property, falling back to the given default value if the datetime property does not exist
Description:
      
Summary:
Get the given object property
Description:
      
Summary:
Get the given array property
Description:
      
Summary:
The unique id of this particular vault item in the users vault
Description:
      
Summary:
The key of the underlying item in the PayVaultItems BigDB table
Description:
      
Summary:
The time when the vault item was originally purchased
Description:
      
Summary:
Returns the number of properties on this object
Description:
      
Summary:
Get the given property as an object
Description:
      
Summary:
Get the names of all properties on this object
Description:
      
Summary:
  An entry in a user's PayVault history  
Description:
      
Summary:
The type of this entry, for example 'buy','credit','debit'...
Description:
      
Summary:
The coin amount of this entry.
Description:
      
Summary:
When this entry was created.
Description:
      
Summary:
The item keys related to this entry (entries with type 'buy').
Description:
      
Summary:
The developer supplied reason for entries of type 'credit' and 'debit'.
Description:
      
Summary:
The transaction id from the PayVault provider corresponding to this entry.
Description:
      
Summary:
The price in real currency of this entry formatted as a human readable currency string, e.g. $10.00 USD
Description:
      
Summary:
  The Player.IO GameFS Service  Here is a simple example on how to use GameFS:  
<code>
            string assetUrl = client.GameFS.GetUrl(&quot;/assets/image.png&quot;);
            </code>
  
Description:
      
Summary:
Converts a GameFS path (like '/mygame.swf') into a full url, that can be downloaded over the internet. Important! Do not save or otherwise persist (bigdb, cookies, etc) the returned url, since the url will change over time.  
Description:
  The path of the file in the GameFS, including the initial slash. Examples: '/mygame.swf' or '/characters/bob.jpg'  
Returns:
An url that can be used to download the resource over the internet
Description:
      
Summary:
Converts a GameFS path (like '/mygame.swf') into a full url, that can be downloaded over the internet. Important! Do not save or otherwise persist (bigdb, cookies, etc) the returned url, since the url will change over time.  
Description:
  The path of the file in the GameFS, including the initial slash. Examples: '/mygame.swf' or '/characters/bob.jpg'  If true, this method returns a secure (https) url.  
Returns:
An url that can be used to download the resource over the internet
Description:
      
Summary:
  The Player.IO BigDB service.  This class is used to create, load, and delete database objects. All database objects are stored in tables and have a unique key. You can set up tables in your admin panel, and you can also set up indexes there for when you want to load objects by properties  or ranges of properties. Please note that all methods are asynchronous and any handling of results have to be done in a callback.  If you don't care about the results of a method call, typically for create or delete functions, you can just pass in a null callback.<p>
  Here's how to store and update an object:  
<code>
            //Make new object and set some properties
            DatabaseObject obj = new DatabaseObject();
            obj.Set(&quot;username&quot;, &quot;Adam&quot;);
            obj.Set(&quot;location&quot;, &quot;London&quot;);
            obj.Set(&quot;age&quot;, 20);
            
            //Create object in table Users with ConnectUserId as key
            client.BigDB.CreateObject(&quot;Users&quot;, ConnectUserId, obj, 
            	delegate (DatabaseObject result){
            		//Change a property and store the update when created
            		result.Set(&quot;location&quot;, &quot;Paris&quot;);
            		result.Save(null);
            	}
            );
            
            </code>
  This is how you load an object:  
<code>
            client.BigDB.Load(&quot;Users&quot;, ConnectUserId, delegate (DatabaseObject result){
            	if (result != null) {
            		//Change a property and save back.
            		result.Set(&quot;location&quot;, &quot;Amsterdam&quot;);
            		result.Save(null);
            	}
            });
            </code>
  In case you always want to modify an object, you can use the LoadOrCreate method to ensure you get an object back:  
<code>
            client.BigDB.LoadOrCreate(&quot;Users&quot;, ConnectUserId, 
            	delegate (DatabaseObject result){
            		if (!result.Contains(&quot;username&quot;)) {
            			//Empty object, initialize it
            			result.Set(&quot;username&quot;, &quot;Charlie&quot;);
            			result.Set(&quot;age&quot;, 20);
            		}
            		result.Set(&quot;location&quot;, &quot;London&quot;);
            		result.Save();
            	}
            );
            </code>
    BigDB also supports indexes for retrieving objects by a specific property, a range of properties, or to sort objects by properties. Indexes need to be set up in the admin panel for each table, each index needs a name, and a list of properties, and for each property you also need to specify a  sort order.  <p>
  Imagine that we have objects that look like this:  
<code>
            {
            	username:&quot;Adam&quot;,
            	created:2010-05-12 15:28
            	location:&quot;London&quot;,
            	age:20,
            }
            </code>
  That we have defined an index called &quot;ByUsername&quot; that looks like this:    
            * {Property:&quot;username&quot;, Type:String, Order:Ascending}  
  <p>
  And an index called &quot;ByCreated&quot; that looks like this:    
            * {Property:&quot;created&quot;, Type:Datetime, Order:Descending}  
  <p>
  Then we can do lookups like these:  
<code>
            //Get the object where username=&quot;Adam&quot;
            client.BigDB.LoadSingle(&quot;Users&quot;, &quot;ByUsername&quot;, new object[]{&quot;Adam&quot;}, 
            	delegate(DatabaseObject result) {
            		//...
            	}
            );
            
            //Get all users with usernames between &quot;Adam&quot; and &quot;Charlie&quot;.
            //This would retrieve users named &quot;Adamsson&quot; and &quot;Barney&quot;, 
            //but not users named &quot;Abel&quot; or &quot;Charlotte&quot;.
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByUsername&quot;, null, &quot;Adam&quot;, &quot;Charlie&quot;, 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Get all users up to and including &quot;Adam&quot;. This would retrieve 
            //users named &quot;Aaron&quot; and &quot;Ackerman&quot;, but not &quot;Adamsson&quot; or &quot;Barney&quot;.
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByUsername&quot;, null, null, &quot;Adam&quot;, 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Get all users from &quot;Xerxes&quot;. This would retrieve users named 
            //&quot;Yngwie&quot; and &quot;Zed&quot;, but not &quot;Charlie&quot; or &quot;Xantippa&quot;.
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByUsername&quot;, null, &quot;Xerxes&quot;, null, 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Retrieve the ten first objects by the ByCreated index. 
            //Since that index is sorted in descending order, this will actually 
            //retrieve the 10 latest created users.
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByCreated&quot;, null, null, null, 10, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Get the 10 latest users that were created more than 7 days ago.
            var weekago = DateTime.Now.AddDays(-7);
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByCreated&quot;, null, weekago, null, 10, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            </code>
    BigDB also supports compound indexes, that is indexes with more than one property. Given our example object above, we can create an index called &quot;ByLocationAgeCreated&quot; that looks like this:    
            * {Property:&quot;location&quot;, Type:String, Order:Ascending}  
            * {Property:&quot;age&quot;, Type:Integer, Order:Ascending}  
            * {Property:&quot;created&quot;, Type:Datetime, Order:Descending}  
  <p>
    With this index, we can then lookup on either location, or location and age, or location and age and created. If we use more than one property in the lookup, we can only specify the range for the last one, the preceding ones have to be fixed and are sent in via the path parameter.    
<code>
            //Load all users where location is &quot;London&quot;
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByLocationAgeCreated&quot;, null, &quot;London&quot;, 
            	&quot;London&quot;, 100, delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Load all users from London between 20 and 30 years of age
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByLocationAgeCreated&quot;, 
            	new object[]{&quot;London&quot;}, 20, 30, 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Load all users from London that are above 50
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByLocationAgeCreated&quot;, 
            	new object[]{&quot;London&quot;}, 50, null, 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Load all users from Paris that are 30 years old, and were created in April
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByLocationAgeCreated&quot;, 
            	new object[]{&quot;Paris&quot;, 30}, new DateTime(2010, 4, 1), 
            	new DateTime(2010, 4, 30), 100, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            
            //Load the 10 latest 20-year old users from Amsterdam
            client.BigDB.LoadRange(&quot;Users&quot;, &quot;ByLocationAgeCreated&quot;, 
            	new object[]{&quot;Amsterdam&quot;, 20}, null, null, 10, 
            	delegate(DatabaseObject[] result) {
            		//...
            	}
            );
            </code>
  Finally, deleting objects is as easy as calling the DeleteKeys method, or DeleteRange if you want to delete by an index.  
<code>
            //Delete current Users object.
            client.BigDB.DeleteKeys(&quot;Users&quot;, ConnectUserId, null);
            
            //Delete all objects with usernames between &quot;Adam&quot; and &quot;Charle&quot;
            client.BigDB.DeleteRange(&quot;Users&quot;, &quot;ByUsername&quot;, null, &quot;Adam&quot;, 
            	&quot;Charlie&quot;, null);
            
            //Delete all objects with created older than one year
            client.BigDB.DeleteRange(&quot;Users&quot;, &quot;ByUsername&quot;, null, 
            	DateTime.Now.AddYear(-1), null, null);
            </code>
  
Description:
      
Summary:
Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.
Description:
  The name of the table to create the database object in  The key to assign to the database object  The database object to create in the table  
Returns:
A new instance of DatabaseObject from which .Save() can be called for future modifications.
Description:
      
Summary:
Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.
Description:
  The name of the table to create the database object in  The key to assign to the database object  The database object to create in the table  Callback to execute when the object has been created with a new instance of DatabaseObject from which .Save() can be called for future modifications.      
Summary:
Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.
Description:
  The name of the table to create the database object in  The key to assign to the database object  The database object to create in the table  Callback that will be called with a new instance of DatabaseObject from which .Save() can be called for future modifications when the object has been created.  Callback that will be called instead of successCallback if an error occurs during the object creation.      
Summary:
Loads the database object corresponding to the player from the PlayerObjects table
Description:
  
Returns:
The database object corresponding to the player in the PlayerObjects table
Description:
      
Summary:
Loads the database object corresponding to the player from the PlayerObjects table
Description:
  Callback with the loaded player object      
Summary:
Loads the database object corresponding to the player from the PlayerObjects table
Description:
  Callback with the loaded player object  Callback that will be called instead of successCallback if an error occurs during the load.      
Summary:
Load the database object with the given key from the given table.
Description:
  The table to load the database object from  The key of the database object to load  
Returns:
The database object found, or null if no object exists with the given key.
Description:
      
Summary:
Load the database object with the given key from the given table.
Description:
  The table to load the database object from  The key of the database object to load  Callback with the loaded database object      
Summary:
Load the database object with the given key from the given table.
Description:
  The table to load the database object from  The key of the database object to load  Callback with the loaded database object or null if no object exists with the given key  Callback that will be called instead of successCallback if an error occurs during the load.      
Summary:
Loads or creates the database object with the given key from the given table.
Description:
  The table from which to load or create the database object  The key of the database object to load or create  
Returns:
The database object loaded
Description:
      
Summary:
Loads or creates the database object with the given key from the given table.
Description:
  The table from which to load or create the database object  The key of the database object to load or create  Callback with the database object      
Summary:
Loads or creates the database object with the given key from the given table.
Description:
  The table from which to load or create the database object  The key of the database object to load or create  Callback with the database object  Callback that will be called instead of successCallback if an error occurs during the load or create.      
Summary:
Loads the database objects with the given keys from the given table.
Description:
  The table to load the database objects from  They keys of the database objects to load  
Returns:
An array of database objects in the same order as the keys array, with null values for non-existant database objects.
Description:
      
Summary:
Loads the database objects with the given keys from the given table.
Description:
  The table to load the database objects from  They keys of the database objects to load  Callback with an array of database objects in the same order as the keys array, with null values for non-existant database objects      
Summary:
Loads the database objects with the given keys from the given table.
Description:
  The table to load the database objects from  They keys of the database objects to load  Callback with an array of database objects in the same order as the keys array, with null values for non-existant database objects  Callback that will be called instead of successCallback if an error occurs during the load.      
Summary:
Loads or creates database objects with the given keys from the given table. New objects are created if there are no existing objects for the given keys.
Description:
  The table to load the database objects from  They keys of the database objects to load  
Returns:
An array of database objects in the same order as the keys array
Description:
      
Summary:
Loads or creates database objects with the given keys from the given table. New objects are created if there are no existing objects for the given keys.
Description:
  The table to load the database objects from  They keys of the database objects to load  Callback with an array of database objects in the same order as the keys array      
Summary:
Loads or creates database objects with the given keys from the given table. New objects are created if there are no existing objects for the given keys.
Description:
  The table to load the database objects from  They keys of the database objects to load  Callback with an array of database objects in the same order as the keys array  Callback that will be called instead of successCallback if an error occurs during the load or create.      
Summary:
Load a database object from a table using the specified index.
Description:
  The table to load the database object from  The name of the index to query for the database object  An array of objects of the same types as the index properties, specifying which object to load  
Returns:
The database object found, or null if no object was found.
Description:
      
Summary:
Load a database object from a table using the specified index.
Description:
  The table to load the database object from  The name of the index to query for the database object  An array of objects of the same types as the index properties, specifying which object to load  Callback with the database object found, or null if no object was found      
Summary:
Load a database object from a table using the specified index.
Description:
  The table to load the database object from  The name of the index to query for the database object  An array of objects of the same types as the index properties, specifying which object to load  Callback with the database object found, or null if no object was found  Callback that will be called instead of successCallback if an error occurs during the load.      
Summary:
Load a range of database objects from a table using the specified index.
Description:
  The table to load the database object from  The name of the index to query for the database object  Where in the index to start the range search: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{&quot;expert&quot;,&quot;skyland&quot;} as the indexPath and use the start and stop arguments to determine the range of scores you wish to return. IndexPath can be set to null if there is only one property in the index.  Where to start the range search. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then start defines the minimum score to include in the results  Where to stop the range search. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then stop defines the maximum score to include in the results  The max amount of objects to return  
Returns:
The database objects found.
Description:
      
Summary:
Load a range of database objects from a table using the specified index.
Description:
  The table to load the database object from  The name of the index to query for the database object  Where in the index to start the range search: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{&quot;expert&quot;,&quot;skyland&quot;} as the indexPath and use the start and stop arguments to determine the range of scores you wish to return. IndexPath can be set to null if there is only one property in the index.  Where to start the range search. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then start defines the minimum score to include in the results  Where to stop the range search. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then stop defines the maximum score to include in the results  The max amount of objects to return  Callback with the database objects found.      
Summary:
Load a range of database objects from a table using the specified index.
Description:
  The table to load the database object from  The name of the index to query for the database object  Where in the index to start the range search: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{&quot;expert&quot;,&quot;skyland&quot;} as the indexPath and use the start and stop arguments to determine the range of scores you wish to return. IndexPath can be set to null if there is only one property in the index.  Where to start the range search. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then start defines the minimum score to include in the results  Where to stop the range search. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then stop defines the maximum score to include in the results  The max amount of objects to return  Callback with the database objects found.  Callback that will be called instead of successCallback if an error occurs during the load.      
Summary:
Save changes to one or more database objects in one go.
Description:
  Should the save only go through, if no other process has modified the object since it was loaded?  Overwrite the stored object with the data from this object instead of only sending in the changed properties  The objects with changes to save  
Returns:
True if the save succeded, false if not (only if using optimistic locking and newer version exists in database).
Description:
      
Summary:
Save changes to one or more database objects in one go.
Description:
  Should the save only go through, if no other process has modified the object since it was loaded?  Overwrite the stored object with the data from this object instead of only sending in the changed properties  The objects with changes to save  Callback with true if the save succeded and false if it failed (only if using optimistic locking and newer version exists in database)      
Summary:
Save changes to one or more database objects in one go.
Description:
  Should the save only go through, if no other process has modified the object since it was loaded?  Overwrite the stored object with the data from this object instead of only sending in the changed properties  The objects with changes to save  Callback with true if the save succeded and false if it failed (only if using optimistic locking and newer version exists in database)  Callback that will be called instead of successCallback if an error occurs during the save.      
Summary:
Delete a set of database objects from a table
Description:
  The table to delete the database objects from  The keys of the database objects to delete      
Summary:
Delete a set of database objects from a table
Description:
  The table to delete the database objects from  The keys of the database objects to delete  Callback when the deletion has completed.      
Summary:
Delete a set of database objects from a table
Description:
  The table to delete the database objects from  The keys of the database objects to delete  Callback when the deletion has completed.  Callback that will be called instead of successCallback if an error occurs during the deletion.      
Summary:
Delete a range of database objects from a table using an index
Description:
  The table to delete the database object from  The name of the index to query for the database objects to delete  Where in the index to start the range delete: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{&quot;expert&quot;,&quot;skyland&quot;} as the indexPath and use the start and stop arguments to determine the range of scores you wish to delete. IndexPath can be set to null instead of an empty array.  Where to start the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then start defines the minimum score to delete  Where to stop the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then stop defines the maximum score to delete      
Summary:
Delete a range of database objects from a table using an index
Description:
  The table to delete the database object from  The name of the index to query for the database objects to delete  Where in the index to start the range delete: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{&quot;expert&quot;,&quot;skyland&quot;} as the indexPath and use the start and stop arguments to determine the range of scores you wish to delete. IndexPath can be set to null instead of an empty array.  Where to start the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then start defines the minimum score to delete  Where to stop the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then stop defines the maximum score to delete  Callback when the deletion has completed.      
Summary:
Delete a range of database objects from a table using an index
Description:
  The table to delete the database object from  The name of the index to query for the database objects to delete  Where in the index to start the range delete: An array of objects of the same types as the index properties, specifying where in the index to start loading database objects from. For instance, in the index [Mode,Map,Score] you might use new object[]{&quot;expert&quot;,&quot;skyland&quot;} as the indexPath and use the start and stop arguments to determine the range of scores you wish to delete. IndexPath can be set to null instead of an empty array.  Where to start the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then start defines the minimum score to delete  Where to stop the range delete. For instance, if the index is [Mode,Map,Score] and indexPath is [&quot;expert&quot;,&quot;skyland&quot;], then stop defines the maximum score to delete  Callback when the deletion has completed.  Callback that will be called instead of successCallback if an error occurs during the deletion.      
Summary:
Returns a token that can be used to work with PlayerIO methods in the future
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default  The id of the user connecting. This can be any string you like.  If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here  The partner id of the user connecting, if any.      
Summary:
Returns a token that can be used to work with PlayerIO methods in the future
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default  The id of the user connecting. This can be any string you like.  If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here  The partner id of the user connecting, if any.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Authenticates a user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The username or email of the user you wish to authenticate.  The password of the user you wish to authenticate.      
Summary:
Authenticates a user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The username or email of the user you wish to authenticate.  The password of the user you wish to authenticate.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The width of the Captcha image.  The height of the Captcha image.      
Summary:
Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The width of the Captcha image.  The height of the Captcha image.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Registers a new user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The username of the new user.  The password of the new user.  The email of the new user. (optional)  (only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value  (only if captcha is required) The string the user entered in response to the captcha image  Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)  The partner id of the user connecting, if any.      
Summary:
Registers a new user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The username of the new user.  The password of the new user.  The email of the new user. (optional)  (only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value  (only if captcha is required) The string the user entered in response to the captcha image  Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)  The partner id of the user connecting, if any.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Initiates the password recovery process for a user. The user must have supplied an email address during registration.
Description:
  The game id of the game the user is registered in.  The username or email address of the user that wishes to recover his password.      
Summary:
Initiates the password recovery process for a user. The user must have supplied an email address during registration.
Description:
  The game id of the game the user is registered in.  The username or email address of the user that wishes to recover his password.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Authenticates a Kongregate user and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Kongregate user id of the user you wish to authenticate.  The Kongregate game auth token of the user's session.      
Summary:
Authenticates a Kongregate user and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Kongregate user id of the user you wish to authenticate.  The Kongregate game auth token of the user's session.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Authenticates a Facebook access_token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Facebook access_token you wish to authenticate with.  The partner id of the user connecting, if any.      
Summary:
Authenticates a Facebook access_token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Facebook access_token you wish to authenticate with.  The partner id of the user connecting, if any.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Authenticates a Steam session.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Steam App Id of the game.  The Steam Session Ticket for the user.      
Summary:
Authenticates a Steam session.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Steam App Id of the game.  The Steam Session Ticket for the user.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Create an multiplayer room on the Player.IO infrastructure
Description:
  The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists  The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  Should the room be visible when listing rooms with GetRooms  The data to initialize the room with, this can be read with ListRooms and changed from the serverside  Should the room be created in the global roomlist, or in the roomlist for the development server?      
Summary:
Create an multiplayer room on the Player.IO infrastructure
Description:
  The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists  The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  Should the room be visible when listing rooms with GetRooms  The data to initialize the room with, this can be read with ListRooms and changed from the serverside  Should the room be created in the global roomlist, or in the roomlist for the development server?  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Join a running multiplayer room
Description:
  The id of the room you wish to connect to  Data to send to the room with additional information about the join   Set to true to look for the room in the development roomlist and not in the games global roomlist.      
Summary:
Join a running multiplayer room
Description:
  The id of the room you wish to connect to  Data to send to the room with additional information about the join   Set to true to look for the room in the development roomlist and not in the games global roomlist.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
List the currently running multiplayer rooms
Description:
  The type of room you wish to list  Only rooms with the same values in their roomdata will be returned  The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.  The offset into the list you wish  Set to true to list rooms in the development roomlist, rather than from the games global roomlist.      
Summary:
List the currently running multiplayer rooms
Description:
  The type of room you wish to list  Only rooms with the same values in their roomdata will be returned  The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.  The offset into the list you wish  Set to true to list rooms in the development roomlist, rather than from the games global roomlist.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Creates a multiplayer room (if it does not exist already) and joins it.
Description:
  The id of the room you wish to create/join  If the room doesn't exist: The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation  If the room doesn't exist: The data to initialize the room with upon creation  Data to send to the room with additional information about the join   Is the room being created/joined running on a development server?      
Summary:
Creates a multiplayer room (if it does not exist already) and joins it.
Description:
  The id of the room you wish to create/join  If the room doesn't exist: The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation  If the room doesn't exist: The data to initialize the room with upon creation  Data to send to the room with additional information about the join   Is the room being created/joined running on a development server?  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
A game server wants to update a room
Description:
    0=Hidden, 1=Visible, 2=NoChange  Changed room data for the room (if null, nothing changes)      
Summary:
A game server wants to update a room
Description:
    0=Hidden, 1=Visible, 2=NoChange  Changed room data for the room (if null, nothing changes)  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
A game server is reporting that a user left a game
Description:
            
Summary:
A game server is reporting that a user left a game
Description:
        Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
A new server has booted and wants to join the cluster
Description:
  The accesskey to for the cluster to join  Is it a development server  the ports which the joining server is listening on  The name of the machine running the server  The version of the production server running on the machine  The unique id of this server  The operating system of this server  CPU Information of this server  How many cores does this server have  How many logical cores does this server have  What is the addresswidth of the server  What is the max clock speed of the server  How much ram does this server have  How fast is the ram of this server      
Summary:
A new server has booted and wants to join the cluster
Description:
  The accesskey to for the cluster to join  Is it a development server  the ports which the joining server is listening on  The name of the machine running the server  The version of the production server running on the machine  The unique id of this server  The operating system of this server  CPU Information of this server  How many cores does this server have  How many logical cores does this server have  What is the addresswidth of the server  What is the max clock speed of the server  How much ram does this server have  How fast is the ram of this server  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Hey PlayerIO; I'm still alive, don't delete my rooms!
Description:
  The accesskey for the cluster of the server                          
Summary:
Hey PlayerIO; I'm still alive, don't delete my rooms!
Description:
  The accesskey for the cluster of the server                      Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Gets the location where the code for a server type can be downloaded.
Description:
  The accesskey for the cluster of the server        
Summary:
Gets the location where the code for a server type can be downloaded.
Description:
  The accesskey for the cluster of the server    Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Login to get a ClusterAccessKey for development server
Description:
          
Summary:
Login to get a ClusterAccessKey for development server
Description:
      Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Writes an entry to the error log
Description:
  Where did the error come from? For instance, if you're writing the error from a flash file, the source might be 'flash' while errors from multiplayer code could be saved under 'multiplayer code'  A short string describing the error without details. Example 'Object not set to instance of an object'  The message describing the error in detail. Example 'couldn't find the user 'bob' in the current game'  The stacktrace (if available) of the error  Any extra data you'd like to associate with the error log entry      
Summary:
Writes an entry to the error log
Description:
  Where did the error come from? For instance, if you're writing the error from a flash file, the source might be 'flash' while errors from multiplayer code could be saved under 'multiplayer code'  A short string describing the error without details. Example 'Object not set to instance of an object'  The message describing the error in detail. Example 'couldn't find the user 'bob' in the current game'  The stacktrace (if available) of the error  Any extra data you'd like to associate with the error log entry  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.
Description:
  The objects to create  Load existing objects if they already exists, instead of throwing an error      
Summary:
Creates a new database object in the given table with the specified key. If no key is specified (null), the object will receive an autogenerated id.
Description:
  The objects to create  Load existing objects if they already exists, instead of throwing an error  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Load database objects
Description:
  Identifiers for the objects to load      
Summary:
Load database objects
Description:
  Identifiers for the objects to load  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Saves changes to database objects that already exists in BigDB.
Description:
  Which kind of lock to use when performing the save  The list of changes to apply to the database  Create objects based on the changesets if there are no existings objects to modify      
Summary:
Saves changes to database objects that already exists in BigDB.
Description:
  Which kind of lock to use when performing the save  The list of changes to apply to the database  Create objects based on the changesets if there are no existings objects to modify  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Deletes the specified database objects
Description:
  Identifiers for the objects to load      
Summary:
Deletes the specified database objects
Description:
  Identifiers for the objects to load  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Loads the database object corresponding to the player from the PlayerObjects table
Description:
      
Summary:
Loads the database object corresponding to the player from the PlayerObjects table
Description:
  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Loads database objects from the specificed table index whose index value matches the given value.
Description:
  The table containing the database objects to locate  The index to perform the lookup in  The value to locate in the index  The maximum amount of database objects to load      
Summary:
Loads database objects from the specificed table index whose index value matches the given value.
Description:
  The table containing the database objects to locate  The index to perform the lookup in  The value to locate in the index  The maximum amount of database objects to load  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Load database objects from the specified table index whose index value is inside the range between start and stop (both inclusive).
Description:
  The table containing the database objects to locate  The index to perform the lookup in  The value to start the range search at  The value to end the range search at  The maximum amount of entries to load      
Summary:
Load database objects from the specified table index whose index value is inside the range between start and stop (both inclusive).
Description:
  The table containing the database objects to locate  The index to perform the lookup in  The value to start the range search at  The value to end the range search at  The maximum amount of entries to load  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Delete all database objects from the specified table index whose index value is inside the range between start and stop (both inclusive).
Description:
  The table containing the database objects to delete  The index to perform the delete by  The value to start the range search at  The value to end the range search at      
Summary:
Delete all database objects from the specified table index whose index value is inside the range between start and stop (both inclusive).
Description:
  The table containing the database objects to delete  The index to perform the delete by  The value to start the range search at  The value to end the range search at  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Read the users PayVault history in reverse chronological order
Description:
  The page to start at. Page 1 contains the latest transactions  The size of each page      
Summary:
Read the users PayVault history in reverse chronological order
Description:
  The page to start at. Page 1 contains the latest transactions  The size of each page  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Download a user's vault (balance and items)
Description:
  If specified, will only return vault items if value has changed since last version.      
Summary:
Download a user's vault (balance and items)
Description:
  If specified, will only return vault items if value has changed since last version.  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Consume one or more items from user's PayVault
Description:
  The ids of the PayVaultItems to use      
Summary:
Consume one or more items from user's PayVault
Description:
  The ids of the PayVaultItems to use  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Put coins into PayVault
Description:
  The amount of coins to add to the vault  The reason that will appear in the vault history      
Summary:
Put coins into PayVault
Description:
  The amount of coins to add to the vault  The reason that will appear in the vault history  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Remove coins from PayVault
Description:
  The coin amount to remove from the vault  The reason that will appear in the vault history      
Summary:
Remove coins from PayVault
Description:
  The coin amount to remove from the vault  The reason that will appear in the vault history  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Buy PayVault items
Description:
  The list of items to buy  Whether or not to store the items in the vault after purchase      
Summary:
Buy PayVault items
Description:
  The list of items to buy  Whether or not to store the items in the vault after purchase  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Give PayVault items to a user
Description:
  The list of items to give      
Summary:
Give PayVault items to a user
Description:
  The list of items to give  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Get payment-provider specific info for completing a purchase
Description:
  Which PayVault provider to use.  PayVault provider specific data required to initiate payment  The list of items for BuyDirect, if any, otherwise the call is to buy coins      
Summary:
Get payment-provider specific info for completing a purchase
Description:
  Which PayVault provider to use.  PayVault provider specific data required to initiate payment  The list of items for BuyDirect, if any, otherwise the call is to buy coins  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Use payment-provider specific arguments for finalizing a purchase
Description:
  Which PayVault provider to use.  PayVault provider specific arguments required to finalize payment      
Summary:
Use payment-provider specific arguments for finalizing a purchase
Description:
  Which PayVault provider to use.  PayVault provider specific arguments required to finalize payment  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Triggers a PartnerPay action
Description:
  The key of the action to trigger  The number of actions to trigger, default should be 1      
Summary:
Triggers a PartnerPay action
Description:
  The key of the action to trigger  The number of actions to trigger, default should be 1  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
Sets (or changes) the partner id of the connected user
Description:
  The id of the partner      
Summary:
Sets (or changes) the partner id of the connected user
Description:
  The id of the partner  Callback method to be executed when request completes successfully  Callback method to be executed if request fails      
Summary:
  This class represents a BigDB Database Object that has a Key and a collection of named properties.  There are methods for setting, getting, and removing properties, and changes to the object can be persisted to BigDB with the Save() method.<p>
  Database objects are very similar to JSON objects and are most easily visualized as such. For example, we can visualize a car object like this:  
<code>
            'car20312' = {
            	Name: 'OldSpeedy',
            	Stats:{
            		Acceleration: 3.2,
            		TopSpeed: 50,
            		Steering: 5,
            		WorkingBreaks:false
            	}
            	LatestLapTimes: ['20:34','22:03','22:30']
            }
            </code>
  If we then want to create this object in BigDB, we would have to do this:  
<code>
            DatabaseObject car = new DatabaseObject();
            car.Set(&quot;Name&quot;, &quot;OldSpeedy&quot;);
            
            //Create nested stats object
            DatabaseObject stats = new DatabaseObject();
            stats.Set(&quot;Acceleration&quot;, 3.2);
            stats.Set(&quot;TopSpeed&quot;, 50);
            stats.Set(&quot;Steering&quot;, 5);
            stats.Set(&quot;WorkingBreaks&quot;, false);
            car.Set(&quot;Stats&quot;, stats);
            
            //Create laptimes array
            DatabaseArray laptimes = new DatabaseArray();
            laptimes.Add(&quot;20:34&quot;);
            laptimes.Add(&quot;22:03&quot;);
            laptimes.Add(&quot;22:30&quot;);
            car.Set(&quot;LatestLapTimes&quot;, laptimes);
            
            //Save car to table &quot;Cars&quot; under key &quot;car20312&quot;
            PlayerIO.BigDB.CreateObject(&quot;Cars&quot;, &quot;car20312&quot;, car, null);
            </code>
  To make it easier to work with nested objects, you can reference them directly by separating the property names with a dot. Using this, we can set the stats properties of the car like this instead:  
<code>
            DatabaseObject car = new DatabaseObject();
            car.Set(&quot;Stats.Acceleration&quot;, 3.2);
            car.Set(&quot;Stats.TopSpeed&quot;, 50);
            car.Set(&quot;Stats.Steering&quot;, 5);
            car.Set(&quot;Stats.WorkingBreaks&quot;, false);
            </code>
  When you want to read properties from a database object, you have to call the corresponding get method indicating the type of the property.  
<code>
            PlayerIO.BigDB.Load(&quot;Cars&quot;, &quot;car20312&quot;, delegate(DatabaseObject car) {
            	string name = car.GetString(&quot;Name&quot;);
            	float acceleration = car.GetFloat(&quot;Stats.Acceleration&quot;);
            	int topspeed = car.GetInt(&quot;Stats.TopSpeed&quot;);
            });
            </code>
  BigDB doesn't enforce anything on your objects. Two objects in the same table do not need to have the same properties set, and do not need to have the same type on the same property. If you try to get a property that is missing, or if you are using a get method of the wrong type, you will get an exception.  
<code>
            PlayerIO.BigDB.Load(&quot;Cars&quot;, &quot;car20312&quot;, delegate(DatabaseObject car) {
            	//Name is a string, throws exception!
            	int name = car.GetInt(&quot;Name&quot;); 
            	//Color does not exist, throws exception!
            	string color = car.GetString(&quot;Color&quot;); 
            });
            </code>
  One way of avoiding this is to first check the object if a certain property exists before reading this. You can do this with the Contains method.  
<code>
            PlayerIO.BigDB.Load(&quot;Cars&quot;, &quot;car20312&quot;, delegate(DatabaseObject car) {
            	if (!car.Contains(&quot;Name&quot;)) {
            		car.Set(&quot;Name&quot;, &quot;Unknown&quot;);
            	}
            	if (car.Contains(&quot;Stats.Steering&quot;)) {
            		//...
            	}
            });
            </code>
  Another way of avoiding errors is to specify a default value when calling a get method. If the object doesn't contain the property, the method will return your default value instead.  
<code>
            PlayerIO.BigDB.Load(&quot;Cars&quot;, &quot;car20312&quot;, delegate(DatabaseObject car) {
            	string color = car.GetString(&quot;Color&quot;, &quot;Red&quot;);
            });
            </code>
  You can also easily remove properties from your object with the Remove method.  
<code>
            PlayerIO.BigDB.Load(&quot;Cars&quot;, &quot;car20312&quot;, delegate(DatabaseObject car) {
            	car.Remove(&quot;Name&quot;);
            	car.Remove(&quot;Stats.TopSpeed&quot;);
            	if (!car.Contains(&quot;Name&quot;)) {
            		//Name property should be removed now.
            	}
            });
            </code>
  Finally, to persist any changes you've made to an object you can call the Save method. Note that you can only call Save on an object that exist in the database. This means that the first time you save an object you have to call the PlayerIO.BigDB.CreateObject method, but all subsequent times you can call the Save method. There is also a property called ExistsInDatabase that you can use to check if it has been created or not.  
<code>
            car.Set(&quot;Name&quot;, &quot;NewSpeedy&quot;);
            car.Set(&quot;Stats.Acceleration&quot;, 5.0);
            if (car.ExistsInDatabase) {
            	car.Save();
            } else {
            	PlayerIO.BigDB.CreateObject(&quot;Cars&quot;, &quot;car12345&quot;, null);
            }
            </code>
  The Save method is asynchronous just like the CreateObject method in PlayerIO.BigDB, and you can specify a callback if you wish to do something when the object actually has been saved.  
<code>
            car.Set(&quot;Name&quot;, &quot;NewSpeedy&quot;);
            car.Set(&quot;Stats.Acceleration&quot;, 5.0);
            car.Save(delegate() {
            	//On successful save...
            });
            </code>
  
Description:
      
Summary:
The name of the BigDB table this object belongs to
Description:
      
Summary:
The key of the object.
Description:
      
Summary:
Persist the object to the database
Description:
      
Summary:
Persist the object to the database, using optimistic locking if specified
Description:
  If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.      
Summary:
Persist the object to the database, using optimistic locking and full overwrite if specified
Description:
  If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.  Will completely overwrite the database object in BigDB with the properties in this instance, instead of just sending the changed properties to the server.      
Summary:
Persist the object to the database
Description:
  Callback when the save succeeds      
Summary:
Persist the object to the database
Description:
  Callback when the save succeeds  Callback that will be called instead of successCallback if an error occurs during the save.      
Summary:
Persist the object to the database, using optimistic locking if specified
Description:
  If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.  Callback when the save succeeds      
Summary:
Persist the object to the database, using optimistic locking if specified
Description:
  If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.  Callback when the save succeeds  Callback that will be called instead of successCallback if an error occurs during the save.      
Summary:
Persist the object to the database, using optimistic locking and full overwrite if specified
Description:
  If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.  Will completely overwrite the database object in BigDB with the properties in this instance, instead of just sending the changed properties to the server.  Callback when the save succeeds      
Summary:
Persist the object to the database, using optimistic locking and full overwrite if specified
Description:
  If true, the save will only be completed if the database object has not changed in BigDB since this instance was loaded.  Will completely overwrite the database object in BigDB with the properties in this instance, instead of just sending the changed properties to the server.  Callback when the save succeeds  Callback that will be called instead of successCallback if an error occurs during the save.      
Summary:
DatabaseObject constructor
Description:
      
Summary:
Removes all properties on this object
Description:
      
Summary:
Removes the value of the given property from this object
Description:
      
Summary:
Returns true if the given property exists on this object
Description:
      
Summary:
If the given property exists, this method returns true and the value as object in the out parameter. If it does not, this method return false
Description:
      
Summary:
Get the given property as an object
Description:
      
Summary:
Get the given string property
Description:
      
Summary:
Get the given string property, falling back to the given default value if the string property does not exist
Description:
      
Summary:
Get the given int property
Description:
      
Summary:
Get the given int property, falling back to the given default value if the int property does not exist
Description:
      
Summary:
Get the given uint property
Description:
      
Summary:
Get the given uint property, falling back to the given default value if the uint property does not exist
Description:
      
Summary:
Get the given long property
Description:
      
Summary:
Get the given long property, falling back to the given default value if the long property does not exist
Description:
      
Summary:
Get the given bool property
Description:
      
Summary:
Get the given bool property, falling back to the given default value if the bool property does not exist
Description:
      
Summary:
Get the given float property
Description:
      
Summary:
Get the given float property, falling back to the given default value if the float property does not exist
Description:
      
Summary:
Get the given double property
Description:
      
Summary:
Get the given double property, falling back to the given default value if the double property does not exist
Description:
      
Summary:
Get the given byte array property
Description:
      
Summary:
Get the given byte array property, falling back to the given default value if the byte array property does not exist
Description:
      
Summary:
Get the given datetime property
Description:
      
Summary:
Get the given datetime property, falling back to the given default value if the datetime property does not exist
Description:
      
Summary:
Get the given object property
Description:
      
Summary:
Get the given array property
Description:
      
Summary:
Set the given property to the given string value
Description:
      
Summary:
Set the given property to the given int value
Description:
      
Summary:
Set the given property to the given uint value
Description:
      
Summary:
Set the given property to the given long value
Description:
      
Summary:
Set the given property to the given bool value
Description:
      
Summary:
Set the given property to the given float value
Description:
      
Summary:
Set the given property to the given double value
Description:
      
Summary:
Set the given property to the given byte array value
Description:
      
Summary:
Set the given property to the given datetime value
Description:
      
Summary:
Set the given property to the given object
Description:
      
Summary:
Set the given property to the given array
Description:
      
Summary:
Returns true if the object has been persisted
Description:
      
Summary:
Returns the number of properties on this object
Description:
      
Summary:
Get the given property as an object
Description:
      
Summary:
Get the names of all properties on this object
Description:
      
Summary:
  Represents an BigDB array of values that can be accessed by index.  DatabaseArray is very similar to the DatabaseObject class since it has methods for getting, setting, checking and removing values. But unlike DatabaseObject, this class also has methods for adding and inserting values, and there is no Save method, since these cannot be saved to a BigDB table, they always have to be a property of an object.<p>
  If we for example have an object that can be visualized like this:  
<code>
            'car54321' = {
            	Name: 'OldSpeedy',
            	LatestLapTimes: [
            		{
            			Time:'20:34',
            			Position:1
            		},
            		{
            			Time:'22:03',
            			Position:4
            		},
            		{
            			Time:'22:30',
            			Position:5
            		}
            	]
            }
            </code>
  Then we would create it in BigDB like this:  
<code>
            //Create new object
            DatabaseObject car = new DatabaseObject();
            car.Set(&quot;Name&quot;, &quot;OldSpeedy&quot;);
            
            //Make laptimes
            DatabaseObject laptime1 = new DatabaseObject();
            laptime1.Set(&quot;Time&quot;, &quot;20:34&quot;);
            laptime1.Set(&quot;Position&quot;, 1);
            DatabaseObject laptime2 = new DatabaseObject();
            laptime2.Set(&quot;Time&quot;, &quot;22:03&quot;);
            laptime2.Set(&quot;Position&quot;, 4);
            DatabaseObject laptime3 = new DatabaseObject();
            laptime3.Set(&quot;Time&quot;, &quot;22:30&quot;);
            laptime3.Set(&quot;Position&quot;, 5);
            
            //Make array and add laptimes
            DatabaseArray laptimes = new DatabaseArray();
            laptimes.Add(laptime1);
            laptimes.Add(laptime2);
            laptimes.Add(laptime3);
            
            //Add array to car object
            car.Set(&quot;LatestLapTimes&quot;, laptimes);
            
            //Save car to table &quot;Cars&quot; under key &quot;car54321&quot;
            PlayerIO.BigDB.CreateObject(&quot;Cars&quot;, &quot;car54321&quot;, car, null);
            </code>
  However, just like DatabaseObject, DatabaseArray also supports nested property names, and we can refer to values in the array with their index number. Using this, we can make the example object in an easier way, like this:  
<code>
            DatabaseObject car = new DatabaseObject();
            car.Set(&quot;Name&quot;, &quot;OldSpeedy&quot;);
            car.Set(&quot;LatestLapTimes&quot;, new DatabaseArray());
            car.Set(&quot;LatestLapTimes.0.Time&quot;, &quot;20:34&quot;);
            car.Set(&quot;LatestLapTimes.0.Position&quot;, 1);
            car.Set(&quot;LatestLapTimes.1.Time&quot;, &quot;22:03&quot;);
            car.Set(&quot;LatestLapTimes.1.Position&quot;, 4);
            car.Set(&quot;LatestLapTimes.2.Time&quot;, &quot;22:30&quot;);
            car.Set(&quot;LatestLapTimes.2.Position&quot;, 5);
            </code>
  Getting values works exactly like for DatabaseObject, and we can also use nested properties.  
<code>
            PlayerIO.BigDB.Load(&quot;Cars&quot;, &quot;car54321&quot;, delegate(DatabaseObject car) {
            	//Get position from first laptime
            	DatabaseArray laptimes = car.GetArray(&quot;LatestLapTimes&quot;);
            	DatabaseObject laptime = laptimes.GetObject(0);
            	int position = laptime.GetInt(&quot;Position&quot;);
            
            	//Get position from second laptime
            	int position2 = laptimes.GetInt(&quot;1.Position&quot;);
            	
            	//Or get position from third laptime directly
            	int position3 = car.GetInt(&quot;LatestLapTimes.2.Position&quot;);
            });
            </code>
  In addition to getting and setting values, we can also add values to the end of the array, insert values in the middle of it, or remove values in the middle of it. Note that the arrays are sparse, this means that removing a value doesn't shift the indexes of the following values, and we can set any value beyond the last value of the array.  
<code>
            DatabaseArray arr = new DatabaseArray();
            //We make an array like this: ['a', 'c']
            arr.Add(&quot;a&quot;);
            arr.Add(&quot;c&quot;);
            
            //Now it will look like this: ['a', 'c', 'd']
            arr.Add(&quot;d&quot;);
            
            //We insert a value where c is to get this: ['a', 'b', 'c', 'd']
            arr.Insert(1, &quot;b&quot;);
            
            //If we then remove the third value we get this: ['a', 'b', null, 'd']
            arr.RemoveAt(2);
            
            //Finally, we set the sixth value and get: ['a', 'b', null, 'd', null, 'f']
            arr.Set(5, &quot;f&quot;);
            </code>
  
Description:
      
Summary:
DatabaseArray constructor
Description:
      
Summary:
Remove all values from this array
Description:
      
Summary:
Remove the value at the given index
Description:
      
Summary:
Returns true if a value exists at the given index
Description:
      
Summary:
Get the value at the given index as an object
Description:
      
Summary:
Get the string value at the given index
Description:
      
Summary:
Get the string value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the int value at the given index
Description:
      
Summary:
Get the int value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the uint value at the given index
Description:
      
Summary:
Get the uint value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the long value at the given index
Description:
      
Summary:
Get the long value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the bool value at the given index
Description:
      
Summary:
Get the bool value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the float value at the given index
Description:
      
Summary:
Get the float value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the double value at the given index
Description:
      
Summary:
Get the double value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the byte array value at the given index
Description:
      
Summary:
Get the byte value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the datetime value at the given index
Description:
      
Summary:
Get the datetime value at the given index, falling back to the given default value if the value was at the index is null
Description:
      
Summary:
Get the object at the given index
Description:
      
Summary:
Get the array at the given index
Description:
      
Summary:
Set the value at the given index to the given string
Description:
      
Summary:
Set the value at the given index to the given int
Description:
      
Summary:
Set the value at the given index to the given uint
Description:
      
Summary:
Set the value at the given index to the given long
Description:
      
Summary:
Set the value at the given index to the given bool
Description:
      
Summary:
Set the value at the given index to the given float
Description:
      
Summary:
Set the value at the given index to the given double
Description:
      
Summary:
Set the value at the given index to the given byte array
Description:
      
Summary:
Set the value at the given index to the given datetime
Description:
      
Summary:
Set the value at the given index to the given object
Description:
      
Summary:
Set the value at the given index to the given array
Description:
      
Summary:
Insert the given string value at the given index
Description:
      
Summary:
Insert the given int value at the given index
Description:
      
Summary:
Insert the given uint value at the given index
Description:
      
Summary:
Insert the given long value at the given index
Description:
      
Summary:
Insert the given bool value at the given index
Description:
      
Summary:
Insert the given float value at the given index
Description:
      
Summary:
Insert the given double value at the given index
Description:
      
Summary:
Insert the given byte array value at the given index
Description:
      
Summary:
Insert the given datetime value at the given index
Description:
      
Summary:
Insert the given object at the given index
Description:
      
Summary:
Insert the given array at the given index
Description:
      
Summary:
Add the given string value to the array
Description:
      
Summary:
Add the given int value to the array
Description:
      
Summary:
Add the given uint value to the array
Description:
      
Summary:
Add the given long value to the array
Description:
      
Summary:
Add the given bool value to the array
Description:
      
Summary:
Add the given float value to the array
Description:
      
Summary:
Add the given double value to the array
Description:
      
Summary:
Add the given byte array value to the array
Description:
      
Summary:
Add the given datetime value to the array
Description:
      
Summary:
Add the given object to the array
Description:
      
Summary:
Add the given array to the array
Description:
      
Summary:
Removes the value of the given property from this object
Description:
      
Summary:
Returns true if the given property exists on this object
Description:
      
Summary:
If the given property exists, this method returns true and the value as object in the out parameter. If it does not, this method return false
Description:
      
Summary:
Get the given property as an object
Description:
      
Summary:
Get the given string property
Description:
      
Summary:
Get the given string property, falling back to the given default value if the string property does not exist
Description:
      
Summary:
Get the given int property
Description:
      
Summary:
Get the given int property, falling back to the given default value if the int property does not exist
Description:
      
Summary:
Get the given uint property
Description:
      
Summary:
Get the given uint property, falling back to the given default value if the uint property does not exist
Description:
      
Summary:
Get the given long property
Description:
      
Summary:
Get the given long property, falling back to the given default value if the long property does not exist
Description:
      
Summary:
Get the given bool property
Description:
      
Summary:
Get the given bool property, falling back to the given default value if the bool property does not exist
Description:
      
Summary:
Get the given float property
Description:
      
Summary:
Get the given float property, falling back to the given default value if the float property does not exist
Description:
      
Summary:
Get the given double property
Description:
      
Summary:
Get the given double property, falling back to the given default value if the double property does not exist
Description:
      
Summary:
Get the given byte array property
Description:
      
Summary:
Get the given byte array property, falling back to the given default value if the byte array property does not exist
Description:
      
Summary:
Get the given datetime property
Description:
      
Summary:
Get the given datetime property, falling back to the given default value if the datetime property does not exist
Description:
      
Summary:
Get the given object property
Description:
      
Summary:
Get the given array property
Description:
      
Summary:
Set the given property to the given string value
Description:
      
Summary:
Set the given property to the given int value
Description:
      
Summary:
Set the given property to the given uint value
Description:
      
Summary:
Set the given property to the given long value
Description:
      
Summary:
Set the given property to the given bool value
Description:
      
Summary:
Set the given property to the given float value
Description:
      
Summary:
Set the given property to the given double value
Description:
      
Summary:
Set the given property to the given byte array value
Description:
      
Summary:
Set the given property to the given datetime value
Description:
      
Summary:
Set the given property to the given object
Description:
      
Summary:
Set the given property to the given array
Description:
      
Summary:
  Returns the number of values in this array.  If set to a smaller number than the current count, it will truncate the array.  
Description:
      
Summary:
Get the value at the given index as an object
Description:
      
Summary:
Returns an enumerator that iterates over the indexes in this array that contain values.
Description:
      
Summary:
Returns an enumerator that iterates over all the indexes and values in this array.
Description:
      
Summary:
  The Player.IO ErrorLog service  Here are some simple examples:  
<code>
            PlayerIO.ErrorLog.WriteError(&quot;Error in my method&quot;);
            
            try {
            	//Some code that can throw an exception...
            } catch (Exception e) {
            	PlayerIO.ErrorLog.WriteError(&quot;Exception in my method&quot;, e);
            }
            </code>
  
Description:
      
Summary:
Write an entry to the game's error log. In development the errors are just written to the console, in production they're written to a database and browseable from the admin panel
Description:
  A short string describing the error without details. Example 'Unhandled exception'      
Summary:
Write an entry to the game's error log. In development the error are just written to the console, in production they're written to a database and browseable from the admin panel
Description:
  A short string describing the error without details. Example 'Unhandled exception'  The exception that caused the error      
Summary:
Write an entry to the games error log. In development the error are just written to the console, in production they're written to a database and browseable from the admin panel
Description:
  A short string describing the error without details. Example 'Object not set to instance of an object'  Describe the error in more detail if you have it. Example 'couldn't find the user 'bob' in the current game'  The stacktrace (if available) of the error  Any extra data you'd like to associate with the error log entry      
Summary:
  The Player.IO Multiplayer Service  .  
Description:
      
Summary:
Create a multiplayer room on the Player.IO infrastructure
Description:
  The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists  The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  Should the room be visible when listing rooms with GetRooms  The data to initialize the room with, this can be read with ListRooms and changed from the serverside  
Returns:
The id of the room that was created
Description:
      
Summary:
Create a multiplayer room on the Player.IO infrastructure
Description:
  The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists  The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  Should the room be visible when listing rooms with GetRooms  The data to initialize the room with, this can be read with ListRooms and changed from the serverside  Callback with the id of the room that was created      
Summary:
Create a multiplayer room on the Player.IO infrastructure
Description:
  The id you wish to assign to your new room - You can use this to connect to the specific room later as long as it still exists  The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  Should the room be visible when listing rooms with GetRooms  The data to initialize the room with, this can be read with ListRooms and changed from the serverside  Callback with the id of the room that was created  Callback that will be called instead of successCallback if an error occurs during the room creation.      
Summary:
Join a running multiplayer room
Description:
  The id of the room you wish to connect to  Data to send to the room with additional information about the join   
Returns:
A connection into the room
Description:
      
Summary:
Create an multiplayer room on the Player.IO infrastructure
Description:
  The id of the room you wish to connect to  Data to send to the room with additional information about the join   Callback with a connection into the room      
Summary:
Create an multiplayer room on the Player.IO infrastructure
Description:
  The id of the room you wish to connect to  Data to send to the room with additional information about the join   Callback with a connection into the room  Callback that will be called instead of successCallback if an error occurs      
Summary:
List the currently running multiplayer rooms
Description:
  The type of room you wish to list  Only rooms with the same values in their roomdata will be returned  The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.  The offset into the list you wish  
Returns:
A list of rooms matching the search criteria
Description:
      
Summary:
List the currently running multiplayer rooms
Description:
  The type of room you wish to list  Only rooms with the same values in their roomdata will be returned  The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.  The offset into the list you wish  Callback with a list of rooms matching the search criteria      
Summary:
List the currently running multiplayer rooms
Description:
  The type of room you wish to list  Only rooms with the same values in their roomdata will be returned  The maximum amount of rooms you want to receive. Use 0 for 'as many as possible'.  The offset into the list you wish  Callback with a list of rooms matching the search criteria  Callback that will be called instead of successCallback if an error occurs      
Summary:
Creates a multiplayer room (if it does not exist already) and joins it.
Description:
  The id of the room you wish to create/join  The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation  If the room doesn't exist: The data to initialize the room with upon creation  Data to send to the room with additional information about the join   
Returns:
A connection into the room that was created
Description:
      
Summary:
Creates a multiplayer room (if it does not exist already) and joins it.
Description:
  The id of the room you wish to create/join  The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation  If the room doesn't exist: The data to initialize the room with upon creation  Data to send to the room with additional information about the join   Callback with a connection into the room that was created      
Summary:
Creates a multiplayer room (if it does not exist already) and joins it.
Description:
  The id of the room you wish to create/join  The name of the room type you wish to run the room as. This value should match one of the [RoomType(...)] attributes of your uploaded code. A room type of 'bounce' is always available.  If the room doesn't exist: Should the room be visible when listing rooms with GetRooms upon creation  If the room doesn't exist: The data to initialize the room with upon creation  Data to send to the room with additional information about the join   Callback with a connection into the room that was created  Callback that will be called instead of successCallback if an error occurs      
Summary:
  If not null, rooms will be created on the development server at the address defined by the server endpoint, instead of using the live Player.IO servers.  
Description:
      
Summary:
  Entry class for making a QuickConnect connection to Player.IO  Here is an example on how to register a new SimpleUser:  
<code>
            //Register a SimpleUser
            PlayerIO.QuickConnect.SimpleRegister(
            	&quot;[Enter your game id here]&quot;,
            	&quot;username&quot;,
            	&quot;password&quot;,
            	&quot;email&quot;,
            	null, //Optional captchakey
            	null, //Optional captchavalue
            	null, //Optional extra data
            	null, //Optional partner id
            	delegate(Client client) {
            		//Here's a client, do something with the client.
            	},
            	delegate(PlayerIORegistrationError error) {
            		Console.WriteLine(error.Message);
            	}
            );
            </code>
  And a returning user can connect like this:  
<code>
            //Connect with a SimpleUser
            PlayerIO.QuickConnect.SimpleConnect(
            	&quot;[Enter your game id here]&quot;,
            	&quot;username&quot;,
            	&quot;password&quot;,
            	delegate(Client client) {
            		//Here's a client, do something with the client.
            	},
            	delegate(PlayerIORegistrationError error) {
            		Console.WriteLine(error.Message);
            	}
            );
            </code>
  After registering or connecting, you get a Client object which you can then use just as if you used the regular Connect method.<p>
  Note that unlike the regular Connect method you don't specify the name of the connection to use, instead you set this up in the QuickConnect admin panel for your game.  
Description:
      
Summary:
Authenticates a user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The username or email of the user you wish to authenticate.  The password of the user you wish to authenticate.  
Returns:
The connected client
Description:
      
Summary:
Authenticates a user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The username or email of the user you wish to authenticate.  The password of the user you wish to authenticate.  Callback with the connected client, if successful      
Summary:
Authenticates a user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The username or email of the user you wish to authenticate.  The password of the user you wish to authenticate.  Callback with the connected client, if successful  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The width of the Captcha image.  The height of the Captcha image.  
Returns:
Information about the captcha image
Description:
      
Summary:
Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The width of the Captcha image.  The height of the Captcha image.  Callback with information about the captcha image, if successful      
Summary:
Creates a Captcha image and key, to be used for registrations where the added security of Captcha is required..
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The width of the Captcha image.  The height of the Captcha image.  Callback with information about the captcha image, if successful  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Registers a new user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The username of the new user.  The password of the new user.  The email of the new user. (optional)  (only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value  (only if captcha is required) The string the user entered in response to the captcha image  Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  
Returns:
The connected client
Description:
      
Summary:
Registers a new user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The username of the new user.  The password of the new user.  The email of the new user. (optional)  (only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value  (only if captcha is required) The string the user entered in response to the captcha image  Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  Callback with the connected client, if successful      
Summary:
Registers a new user in the simple user db and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel.  The username of the new user.  The password of the new user.  The email of the new user. (optional)  (only if captcha is required) The key of the Captcha image used to get the user to write in the Captcha value  (only if captcha is required) The string the user entered in response to the captcha image  Any extra data that you wish to store with the user such as gender, birthdate, etc. (optional)  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  Callback with the connected client, if successful  Callback with details about why the registration failed, if it failed.      
Summary:
Initiates the password recovery process for a user. The user must have supplied an email address during registration.
Description:
  The game id of the game the user is registered in.  The username or email address of the user that wishes to recover his password.      
Summary:
Initiates the password recovery process for a user. The user must have supplied an email address during registration.
Description:
  The game id of the game the user is registered in.  The username or email address of the user that wishes to recover his password.  Callback if successful      
Summary:
Initiates the password recovery process for a user. The user must have supplied an email address during registration.
Description:
  The game id of the game the user is registered in.  The username or email address of the user that wishes to recover his password.  Callback if successful  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Authenticates a Facebook user using a Facebook access_token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Facebook access_token for the user.  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  
Returns:
The connected client
Description:
      
Summary:
Authenticates a Facebook user using a Facebook access_token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Facebook access_token for the user.  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  Callback with the connected client, if successful      
Summary:
Authenticates a Facebook user using a Facebook access_token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Facebook access_token for the user.  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  Callback with the connected client, if successful  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Authenticates a Kongregate user and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Kongregate user id of the user you wish to authenticate.  The Kongregate game auth token of the user's session.  
Returns:
The connected client
Description:
      
Summary:
Authenticates a Kongregate user and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Kongregate user id of the user you wish to authenticate.  The Kongregate game auth token of the user's session.  Callback with the connected client, if successful      
Summary:
Authenticates a Kongregate user and returns a connection token.
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The Kongregate user id of the user you wish to authenticate.  The Kongregate game auth token of the user's session.  Callback with the connected client, if successful  Callback that will be called instead of successCallback if an error occurs.      
Summary:
Perform a HTTP Get request.
Description:
  The url to request, including querystring arguments (if any)  
Returns:
The http response returned from the remote server
Description:
      
Summary:
Perform a HTTP Get request.
Description:
  The url to request, including querystring arguments (if any)  Callback with a stream of the returned page      
Summary:
Perform a HTTP Get request.
Description:
  The url to request, including querystring arguments (if any)  Callback with a stream of the returned page  Callback that will be called instead of successCallback if an error occurs during the request.      
Summary:
Perform a HTTP Get request.
Description:
  The url to request, including querystring arguments (if any)  The values to post to the given url  
Returns:
The http response returned from the remote server
Description:
      
Summary:
Perform a HTTP Post request.
Description:
  The url to request, including querystring arguments (if any)  The values to post to the given url  Callback with a stream of the returned page      
Summary:
Perform a HTTP Post request.
Description:
  The url to request, including querystring arguments (if any)  The values to post to the given url  Callback with a stream of the returned page  Callback that will be called instead of successCallback if an error occurs during the request.      
Summary:
  Readings and decodes protocol message fields.  
Description:
  
Remarks:
  This class contains two kinds of methods: methods that read specific  protocol message constructs and field types (e.g. ReadTag and  ReadInt32) and methods that read low-level values (e.g.  ReadRawVarint32 and ReadRawBytes). If you are reading encoded protocol  messages, you should use the former methods, but if you are reading some  other format of your own design, use the latter. The names of the former  methods are taken from the protocol buffer type names, not .NET types.  (Hence ReadFloat instead of ReadSingle, and ReadBool instead of ReadBoolean.)  TODO(jonskeet): Consider whether recursion and size limits shouldn't be readonly,  set at construction time.  
Description:
      
Summary:
  The total number of bytes read before the current buffer. The  total bytes read up to the current position can be computed as  totalBytesRetired + bufferPos.  
Description:
      
Summary:
  The absolute position of the end of the current message.  
Description:
     
Summary:
    
Description:
      
Summary:
    
Description:
      
Summary:
  Creates a new CodedInputStream reading data from the given  stream.  
Description:
      
Summary:
  Creates a new CodedInputStream reading data from the given  byte array.  
Description:
      
Summary:
  Attempt to read a field tag, returning 0 if we have reached the end  of the input data. Protocol message parsers use this to read tags,  since a protocol message may legally end wherever a tag occurs, and  zero is not a valid tag number.  
Description:
      
Summary:
  Read a double field from the stream.  
Description:
      
Summary:
  Read a float field from the stream.  
Description:
      
Summary:
  Read a uint64 field from the stream.  
Description:
      
Summary:
  Read an int64 field from the stream.  
Description:
      
Summary:
  Read an int32 field from the stream.  
Description:
      
Summary:
  Read a fixed64 field from the stream.  
Description:
      
Summary:
  Read a fixed32 field from the stream.  
Description:
      
Summary:
  Read a bool field from the stream.  
Description:
      
Summary:
  Reads a string field from the stream.  
Description:
      
Summary:
  Reads a bytes field value from the stream.  
Description:
     
Summary:
  Reads a uint32 field value from the stream.  
Description:
     
Summary:
  Reads an enum field value from the stream. The caller is responsible  for converting the numeric value to an actual enum.  
Description:
     
Summary:
  Reads an sfixed32 field value from the stream.  
Description:
     
Summary:
  Reads an sfixed64 field value from the stream.  
Description:
     
Summary:
  Reads an sint32 field value from the stream.  
Description:
     
Summary:
  Reads an sint64 field value from the stream.  
Description:
     
Summary:
  Same code as ReadRawVarint32, but read each byte individually, checking for  buffer overflow.  
Description:
      
Summary:
  Read a raw Varint from the stream. If larger than 32 bits, discard the upper bits.  This method is optimised for the case where we've got lots of data in the buffer.  That means we can check the size just once, then just read directly from the buffer  without constant rechecking of the buffer length.  
Description:
      
Summary:
  Reads a varint from the input one byte at a time, so that it does not  read any bytes after the end of the varint. If you simply wrapped the  stream in a CodedInputStream and used ReadRawVarint32(Stream)}  then you would probably end up reading past the end of the varint since  CodedInputStream buffers its input.  
Description:
    
Returns:

Description:
      
Summary:
  Read a raw varint from the stream.  
Description:
      
Summary:
  Read a 32-bit little-endian integer from the stream.  
Description:
      
Summary:
  Read a 64-bit little-endian integer from the stream.  
Description:
      
Summary:
  Decode a 32-bit value with ZigZag encoding.  
Description:
  
Remarks:
  ZigZag encodes signed integers into values that can be efficiently  encoded with varint. (Otherwise, negative values must be sign-extended to 64 bits to be varint encoded, thus always taking  10 bytes on the wire.)  
Description:
      
Summary:
  Decode a 32-bit value with ZigZag encoding.  
Description:
  
Remarks:
  ZigZag encodes signed integers into values that can be efficiently  encoded with varint. (Otherwise, negative values must be sign-extended to 64 bits to be varint encoded, thus always taking  10 bytes on the wire.)  
Description:
      
Summary:
  Set the maximum message recursion depth.  
Description:
  
Remarks:
  In order to prevent malicious  messages from causing stack overflows, CodedInputStream limits  how deeply messages may be nested. The default limit is 64.  
Description:
      
Summary:
  Set the maximum message size.  
Description:
  
Remarks:
  In order to prevent malicious messages from exhausting memory or  causing integer overflows, CodedInputStream limits how large a message may be.  The default limit is 64MB. You should set this limit as small  as you can without harming your app's functionality. Note that  size limits only apply when reading from an InputStream, not  when constructed around a raw byte array (nor with ByteString.NewCodedInput).  If you want to read several messages from a single CodedInputStream, you  can call ResetSizeCounter() after each message to avoid hitting the  size limit.  
Description:
      
Summary:
  Resets the current size counter to zero (see SetSizeLimit).  
Description:
      
Summary:
  Sets currentLimit to (current position) + byteLimit. This is called  when descending into a length-delimited embedded message. The previous  limit is returned.  
Description:
  
Returns:
The old limit.
Description:
      
Summary:
  Discards the current limit, returning the previous limit.  
Description:
      
Summary:
  Called when buffer is empty to read more bytes from the  input. If  is true, RefillBuffer() gurantees that  either there will be at least one byte in the buffer when it returns  or it will throw an exception. If  is false,  RefillBuffer() returns false if no more bytes were available.  
Description:
    
Returns:

Description:
      
Summary:
  Reads and discards a single field, given its tag value.  
Description:
  
Returns:
false if the tag is an end-group tag, in which case  nothing is skipped. Otherwise, returns true.
Description:
      
Summary:
  Reads and discards an entire message. This will read either until EOF  or until an endgroup tag, whichever comes first.  
Description:
      
Summary:
  Abstraction of skipping to cope with streams which can't really skip.  
Description:
      
Summary:
  Returns whether or not all the data before the limit has been read.  
Description:
  
Returns:

Description:
      
Summary:
  Returns true if the stream has reached the end of the input. This is the  case if either the end of the underlying input source has been reached or  the stream has reached a limit created using PushLimit.  
Description:
      
Summary:
  Encodes and writes protocol message fields.  
Description:
  
Remarks:
  This class contains two kinds of methods: methods that write specific  protocol message constructs and field types (e.g. WriteTag and  WriteInt32) and methods that write low-level values (e.g.  WriteRawVarint32 and WriteRawBytes). If you are writing encoded protocol  messages, you should use the former methods, but if you are writing some  other format of your own design, use the latter. The names of the former  methods are taken from the protocol buffer type names, not .NET types.  (Hence WriteFloat instead of WriteSingle, and WriteBool instead of WriteBoolean.)  
Description:
      
Summary:
  The buffer size used by CreateInstance(Stream).  
Description:
      
Summary:
  Creates a new CodedOutputStream which write to the given stream.  
Description:
      
Summary:
  Creates a new CodedOutputStream which write to the given stream and uses  the specified buffer size.  
Description:
      
Summary:
  Creates a new CodedOutputStream that writes directly to the given  byte array. If more bytes are written than fit in the array,  OutOfSpaceException will be thrown.  
Description:
      
Summary:
  Creates a new CodedOutputStream that writes directly to the given  byte array slice. If more bytes are written than fit in the array,  OutOfSpaceException will be thrown.  
Description:
      
Summary:
  Writes a double field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a float field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a uint64 field value, including tag, to the stream.  
Description:
      
Summary:
  Writes an int64 field value, including tag, to the stream.  
Description:
      
Summary:
  Writes an int32 field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a fixed64 field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a fixed32 field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a bool field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a string field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a group field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a double field value, including tag, to the stream.  
Description:
      
Summary:
  Writes a float field value, without a tag, to the stream.  
Description:
      
Summary:
  Writes a uint64 field value, without a tag, to the stream.  
Description:
      
Summary:
  Writes an int64 field value, without a tag, to the stream.  
Description:
      
Summary:
  Writes an int32 field value, without a tag, to the stream.  
Description:
      
Summary:
  Writes a fixed64 field value, without a tag, to the stream.  
Description:
      
Summary:
  Writes a fixed32 field value, without a tag, to the stream.  
Description:
      
Summary:
  Writes a bool field value, without a tag, to the stream.  
Description:
      
Summary:
  Writes a string field value, without a tag, to the stream.  
Description:
      
Summary:
  Writes a group field value, without a tag, to the stream.  
Description:
      
Summary:
  Encodes and writes a tag.  
Description:
      
Summary:
  Writes a 32 bit value as a varint. The fast route is taken when  there's enough buffer space left to whizz through without checking  for each byte; otherwise, we resort to calling WriteRawByte each time.  
Description:
      
Summary:
  Writes out an array of bytes.  
Description:
      
Summary:
  Writes out part of an array of bytes.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  double field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  float field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  uint64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  int64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  int32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  fixed64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  fixed32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  bool field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  string field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  bytes field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  uint32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  enum field, including the tag. The caller is responsible for  converting the enum value to its numeric value.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  sfixed32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  sfixed64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  sint32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  sint64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  double field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  float field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  uint64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  int64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  int32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  fixed64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  fixed32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  bool field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  string field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  bytes field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  uint32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a  enum field, including the tag. The caller is responsible for  converting the enum value to its numeric value.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  sfixed32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  sfixed64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  sint32 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode an  sint64 field, including the tag.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a varint.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a varint.  
Description:
      
Summary:
  Compute the number of bytes that would be needed to encode a tag.  
Description:
      
Summary:
  Encode a 32-bit value with ZigZag encoding.  
Description:
  
Remarks:
  ZigZag encodes signed integers into values that can be efficiently  encoded with varint. (Otherwise, negative values must be sign-extended to 64 bits to be varint encoded, thus always taking  10 bytes on the wire.)  
Description:
      
Summary:
  Encode a 64-bit value with ZigZag encoding.  
Description:
  
Remarks:
  ZigZag encodes signed integers into values that can be efficiently  encoded with varint. (Otherwise, negative values must be sign-extended to 64 bits to be varint encoded, thus always taking  10 bytes on the wire.)  
Description:
      
Summary:
  Verifies that SpaceLeft returns zero. It's common to create a byte array  that is exactly big enough to hold a message, then write to it with  a CodedOutputStream. Calling CheckNoSpaceLeft after writing verifies that  the message was actually as big as expected, which can help bugs.  
Description:
      
Summary:
  If writing to a flat array, returns the space left in the array. Otherwise,  throws an InvalidOperationException.  
Description:
      
Summary:
  Indicates that a CodedOutputStream wrapping a flat byte array  ran out of space.  
Description:
      
Summary:
  This class is used internally by the Protocol Buffer Library and generated  message implementations. It is public only for the sake of those generated  messages. Others should not use this class directly.    This class contains constants and helper functions useful for dealing with  the Protocol Buffer wire format.    
Description:
      
Summary:
  Given a tag value, determines the wire type (lower 3 bits).  
Description:
      
Summary:
  Given a tag value, determines the field number (the upper 29 bits).  
Description:
      
Summary:
  Makes a tag value given a field number and wire type.  TODO(jonskeet): Should we just have a Tag structure?  
Description:
      
Summary:
  Represents information about the purchase of a PayVault item.  The minimum information necessary to create an instance of this class is an itemKey representing the PayVaultItem that should be purchased.<p>
  It is also possible to add a custom payload, and this data will always be present when reading the item from the user's Vault. For example: Imagine that we have a racing game and users should be able to buy different cars of different colors, but that color doesn't affect the price  of the car. Instead of creating one PayVaultItem for each combination of type and color, we need only create one item for each type and give them  a different price, and color can then be added in the payload when buying a car.<p>
  Setting the payload works exactly like manipulating a DatabaseObject from BigDB.  
<code>
            //Buy a red 'simplecar' with stripes.
            client.PayVault.Buy(true, new BuyItemInfo[]{
            	new BuyItemInfo(&quot;simplecar&quot;).Set(&quot;Color&quot;, &quot;Red&quot;).Set(&quot;Stripes&quot;, true)
            }, null);
            </code>
  
Description:
      
Summary:
  Creates a new BuyItemInfo to describe an item to purchase.  
Description:
  They key of the underlying item in the PayVaultItems table.      
Summary:
Removes all properties on this object
Description:
      
Summary:
Removes the value of the given property from this object
Description:
      
Summary:
Returns true if the given property exists on this object
Description:
      
Summary:
If the given property exists, this method returns true and the value as object in the out parameter. If it does not, this method return false
Description:
      
Summary:
Get the given property as an object
Description:
      
Summary:
Get the given string property
Description:
      
Summary:
Get the given string property, falling back to the given default value if the string property does not exist
Description:
      
Summary:
Get the given int property
Description:
      
Summary:
Get the given int property, falling back to the given default value if the int property does not exist
Description:
      
Summary:
Get the given uint property
Description:
      
Summary:
Get the given uint property, falling back to the given default value if the uint property does not exist
Description:
      
Summary:
Get the given long property
Description:
      
Summary:
Get the given long property, falling back to the given default value if the long property does not exist
Description:
      
Summary:
Get the given bool property
Description:
      
Summary:
Get the given bool property, falling back to the given default value if the bool property does not exist
Description:
      
Summary:
Get the given float property
Description:
      
Summary:
Get the given float property, falling back to the given default value if the float property does not exist
Description:
      
Summary:
Get the given double property
Description:
      
Summary:
Get the given double property, falling back to the given default value if the double property does not exist
Description:
      
Summary:
Get the given byte array property
Description:
      
Summary:
Get the given byte array property, falling back to the given default value if the byte array property does not exist
Description:
      
Summary:
Get the given datetime property
Description:
      
Summary:
Get the given datetime property, falling back to the given default value if the datetime property does not exist
Description:
      
Summary:
Get the given object property
Description:
      
Summary:
Get the given array property
Description:
      
Summary:
Set the given property to the given string value
Description:
      
Summary:
Set the given property to the given int value
Description:
      
Summary:
Set the given property to the given uint value
Description:
      
Summary:
Set the given property to the given long value
Description:
      
Summary:
Set the given property to the given bool value
Description:
      
Summary:
Set the given property to the given float value
Description:
      
Summary:
Set the given property to the given double value
Description:
      
Summary:
Set the given property to the given byte array value
Description:
      
Summary:
Set the given property to the given datetime value
Description:
      
Summary:
Set the given property to the given object
Description:
      
Summary:
Set the given property to the given array
Description:
      
Summary:
Returns the number of properties on this object
Description:
      
Summary:
Get the given property as an object
Description:
      
Summary:
Get the names of all properties on this object
Description:
      
Summary:
The method requested is not supported
Description:
      
Summary:
A general error occurred
Description:
      
Summary:
An unexpected error occurred inside the Player.IO webservice. Please try again.
Description:
      
Summary:
Access is denied
Description:
      
Summary:
The message is malformatted
Description:
      
Summary:
A value is missing
Description:
      
Summary:
A game is required to do this action
Description:
      
Summary:
An error occurred while contacting an external service
Description:
      
Summary:
The given argument value is outside the range of allowed values.
Description:
      
Summary:
The given type was invalid
Description:
      
Summary:
The index was out of bounds from the range of acceptable values
Description:
      
Summary:
The game has been disabled, most likely because of missing payment.
Description:
      
Summary:
The game requested is not known by the server
Description:
      
Summary:
The connection requested is not known by the server
Description:
      
Summary:
The auth given is invalid or malformatted
Description:
      
Summary:
There is no server in any of the selected server clusters for the game that are eligible to start a new room in (they're all at full capacity or there are no servers in any of the clusters). Either change the selected clusters for your game in the admin panel, try again later or start some more servers for one of your clusters.
Description:
      
Summary:
The room data for the room was over the allowed size limit
Description:
      
Summary:
You are unable to create room because there is already a room with the specified id
Description:
      
Summary:
The game you're connected to does not have a room type with the specified name
Description:
      
Summary:
There is no room running with that id
Description:
      
Summary:
You can't join the room when the RoomID is null or the empty string
Description:
      
Summary:
The room already has the maxmium amount of users in it.
Description:
      
Summary:
The key you specified is not set as searchable. You can change the searchable keys in the admin panel for the server type
Description:
      
Summary:
The QuickConnect method (simple, facebook, kongregate...) is not enabled for the game. You can enable the various methods in the admin panel for the game
Description:
      
Summary:
The user is unknown
Description:
      
Summary:
The password supplied is incorrect
Description:
      
Summary:
The supplied data is incorrect
Description:
      
Summary:
The key given for the BigDB object is not a valid BigDB key. BigDB keys must be between 1 and 50 word characters (no spaces).
Description:
      
Summary:
The object exceeds the maximum allowed size for BigDB objects.
Description:
      
Summary:
Could not locate the database object.
Description:
      
Summary:
The specified table does not exist.
Description:
      
Summary:
The specified index does not exist.
Description:
      
Summary:
The value given for the index, does not match the expected type.
Description:
      
Summary:
The operation was aborted because the user attempting the operation was not the original creator of the object accessed.
Description:
      
Summary:
The key is in use by another database object
Description:
      
Summary:
BigDB object could not be saved using optimistic locks as it's out of date.
Description:
      
Summary:
Cannot create circular references inside database objects
Description:
      
Summary:
The server could not complete the heartbeat
Description:
      
Summary:
The game code is invalid
Description:
      
Summary:
Cannot access coins or items before vault has been loaded. Please refresh the vault first.
Description:
      
Summary:
There is no PayVault provider with the specified id
Description:
      
Summary:
The specified PayVault provider does not support direct purchase
Description:
      
Summary:
The specified PayVault provider does not support buying coins
Description:
      
Summary:
The user does not have enough coins in the PayVault to complete the purchase or debit.
Description:
      
Summary:
The item does not exist in the vault.
Description:
      
Summary:
The chosen provider rejected one or more of the purchase arguments
Description:
      
Summary:
The chosen provider is not configured correctly in the admin panel
Description:
      
Summary:
Unable to locate the custom PartnerPay action with the given key
Description:
      
Summary:
  Represents a message sent between client and server.  A message consists of a string type, and a payload of zero or more typed parameters.<p>
  For example here we create a simple message that we send to the server indicating that this player is ready:  
<code>
            // message of type ready with no payload
            Message m = Message.Create(&quot;ready&quot;); 
            	 
            // send the message to the server
            connection.Send(m);
            </code>
  Usually, it's much easier to simply use the convenience methods:  
<code>
            // send the server a message of which maps this player selected
            connection.Send(&quot;mapsselected&quot;, &quot;fields-of-glory&quot;, &quot;small-skirmish&quot;);
            
            // send a chat message to the server, that it broadcasts
            connection.Send(&quot;chat&quot;, &quot;Hey guys, are you ready to start the game?&quot;);
            </code>
  You can also build up messages as you go, if you don't know the exact payload until runtime.<p>
  In this example, imagine the player has multiple pieces and we send in the list of moves this player wants to do in a single turn.  
<code>
            // create a new message of type moves
            Message m = Message.Create(&quot;moves&quot;); 
            
            // add all the currently connected userids to the message
            foreach(var move in Moves) {
            	m.Add(move.PieceId, move.X, move.Y);
            }
            
            // send the message to the server
            connection.Send(m);
            </code>
  
Description:
      
Summary:
Create a new Message
Description:
  The type of message to create.  A variable list of the data to add to the message.  
Returns:

Description:
      
Summary:
Gets the string at the given index
Description:
The index to find the entry in      
Summary:
Gets the byte[] at the given index
Description:
The index to find the entry in      
Summary:
Gets the bool at the given index
Description:
The index to find the entry in      
Summary:
Gets the double at the given index
Description:
The index to find the entry in      
Summary:
Gets the float at the given index
Description:
The index to find the entry in      
Summary:
Gets the int at the given index
Description:
The index to find the entry in      
Summary:
Gets the int at the given index
Description:
The index to find the entry in      
Summary:
Gets the uint at the given index
Description:
The index to find the entry in      
Summary:
Gets the uint at the given index
Description:
The index to find the entry in      
Summary:
Gets the long at the given index
Description:
The index to find the entry in      
Summary:
Gets the ulong at the given index
Description:
The index to find the entry in      
Summary:
Gets the ulong at the given index
Description:
The index to find the entry in      
Summary:
Add a string to the message payload 
Description:
the value to add      
Summary:
Add a int to the message payload 
Description:
the value to add      
Summary:
Add a uint to the message payload 
Description:
the value to add      
Summary:
Add a long to the message payload 
Description:
the value to add      
Summary:
Add a ulong to the message payload 
Description:
the value to add      
Summary:
Add a byte[] to the message payload 
Description:
the value to add      
Summary:
Add a float to the message payload 
Description:
the value to add      
Summary:
Add a double to the message payload 
Description:
the value to add      
Summary:
Add a bool to the message payload 
Description:
the value to add      
Summary:
  Add multiple pieces of data to the message in one go.  
Description:
  
Example:
  Adding a string, a number and two boolean values to the message.  
<code>somemessage.Add(&quot;a string&quot;, 1234, true, false)
</code>
  
Description:
  The data to add to the message      
Summary:
The type of the current message
Description:
      
Summary:
The number of data entries in the message, excluding the type.
Description:
      
Summary:
Get the data stored in the mesage at the given index
Description:
      
Summary:
  The address and port where a server can be reached.  
Description:
      
Summary:
The address/hostname of the server
Description:
      
Summary:
The port of the server
Description:
      
Summary:
The id of the room
Description:
      
Summary:
The type of the room (coresponding to the [RoomType(...)] attribute assignd to the room)
Description:
      
Summary:
How many users are currently in the room
Description:
      
Summary:
The current room data for the room
Description:
      
Summary:
  If there are any errors when using the SimpleRegister method of QuickConnect, you will get back an error object of this type that holds more detail about the cause of the error. You can use this information to provide better help for your users when they are filling out your registration form.  
Description:
      
Summary:
The error for the username field, if any.
Description:
      
Summary:
The error for the password field, if any.
Description:
      
Summary:
The error for the email field, if any.
Description:
      
Summary:
The error for the captcha field, if any.
Description:
      
Summary:
The key for this captcha image. This value must be kept and sent to the simpleRegister() method along with the string from the user
Description:
      
Summary:
An url for the captcha image. You must show the image to the user, and ask what text is shown in the image.
Description:
      
Summary:
The status code returned from the remote web server
Description:
      
Summary:
A stream with the body of the http response
Description:
      
Summary:
The response stream read as an UTF8 string
Description:
      
Summary:
  Access class to the various Player.IO services.  Here are some examples on how to work with the client:  
<code>
             //Connect to Player.IO
             var client = PlayerIO.Connect(
            		&quot;[Enter your game id here]&quot;,
            		&quot;public&quot;,
            		&quot;user-id&quot;,
            		null,
            		null
            	);
            	
             //Join a multiplayer room
             var connection = client.Multiplayer.CreateJoinRoom(
            		&quot;my-room-id&quot;, 
            		&quot;bounce&quot;, 
            		true, 
            		null, 
            		null
            	);	
            
             //Load an object from BigDB
             client.BigDB.Load(&quot;Users&quot;, client.ConnectUserId, delegate (DatabaseObject r){
            		if (r != null) {
            			//...
            		}
             });
             
             //Write something to the error log
             client.ErrorLog.WriteError(&quot;Something bad happened...&quot;);
             </code>
 
Description:
      
Summary:
  The ConnectUserId of this client  
Description:
      
Summary:
  Property used to access the Multiplayer service.  
Description:
      
Summary:
  Property used to access the Http Request service.  
Description:
      
Summary:
  Property used to access the BigDB service.  
Description:
      
Summary:
  Property used to access the ErrorLog service.  
Description:
      
Summary:
  Property used to access the GameFS service.  
Description:
      
Summary:
  Property used to access the PartnerPay service.  
Description:
      
Summary:
  Property used to access the PayVault service.  
Description:
      
Summary:
  Entry class for the initial connection to Player.IO  Here is an example of using the class to connect to Player.IO  
<code>
            //Connect to Player.IO
            var client = PlayerIO.Connect(
            	&quot;[Enter your game id here]&quot;,
            	&quot;public&quot;,
            	&quot;user-id&quot;,
            	null,
            	null
            );
            </code>
  
Description:
      
Summary:
Calculate an auth hash for use in the Connect method
Description:
  The userid to use when generating the hash  The shared secret to use when generating the hash. This must be the same value as the one given to a connection in the admin panel.  
Returns:
The generated auth hash
Description:
      
Summary:
Connects to Player.IO using as the given user
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default  The id of the user connecting. This can be any string you like.  If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here. You can generate an auth value using the CalcAuth() method.  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  
Returns:
A UserClient object from which Player.IO can be accessed.
Description:
      
Summary:
Connects to Player.IO using as the given user
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default  The id of the user connecting. This can be any string you like.  If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here. You can generate an auth value using the CalcAuth() method.  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  Callback with the client object when connected      
Summary:
Connects to Player.IO using as the given user
Description:
  The game id of the game you wish to connect to. This value can be found in the admin panel  The id of the connection, as given in the settings section of the admin panel. 'public' should be used as the default  The id of the user connecting. This can be any string you like.  If the connection identified by ConnectionIdentifier only accepts authenticated requests, the auth value generated based on UserId is added here. You can generate an auth value using the CalcAuth() method.  The PartnerPay partner id this user should be tagged with, if you are using the PartnerPay system.  Callback with the client object when connected  Callback that will be called instead of successCallback if an error occurs during the connect.      
Summary:
  Property used to access the QuickConnect service.  
Description:
      
Summary:
  sets up listeners on all ips on the given port  
Description:
      
Summary:
  A connection into a running Player.IO multiplayer room  Here is an example of joining a multiplayer room and listening to all messages  
<code>
             var client = PlayerIO.Connect(
             	&quot;[Enter your game id here]&quot;,
             	&quot;public&quot;,				
             	&quot;user-id&quot;,			
             	null			
             );
             
             // join a multiplayer room
             var connection = client.Multiplayer.CreateJoinRoom(
            		&quot;my-room-id&quot;, 
            		&quot;bounce&quot;, 
            		true, 
            		null, 
            		null
            	);
             Console.WriteLine(&quot;Joined Multiplayer Room&quot;);
            
             // on message =&gt; print to console
             connection.OnMessage += delegate(object sender, PlayerIOClient.Message m) {
             	Console.WriteLine(m.ToString());
             };
            
             // when disconnected =&gt; print reason
             connection.OnDisconnect += delegate(object sender, string reason) {
            		Console.WriteLine(&quot;Disconnected, reason = &quot; + reason);
             };
             </code>
  
Description:
      
Summary:
Add a message handler to the OnMessage event
Description:
      
Summary:
Add a disconnect handler to the OnDisconnect event
Description:
      
Summary:
Disconnect from the game room
Description:
      
Summary:
Send a message to the connected client
Description:
  The message to send      
Summary:
  Send a message to the connected client without first having to construct a Message object.  
Description:
  The type of message to send  The data to put in the message to send      
Summary:
Is the connection currently connected to a remote host?
Description:
      
Summary:
Event fired everytime a message is received.
Description:
      
Summary:
Event fired when the connection is disconnected.
Description:
      
